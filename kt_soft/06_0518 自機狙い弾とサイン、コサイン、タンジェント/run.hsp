;
; メイン画面（ウィンドウ0）を 240x320 で用意する
;
screen 0, 240, 320, 0, 0, 0

px = 112 : py = 304 ; 自機の初期位置

;
; 敵（敵弾）の設定
;
ex = 0 : ey = 10 ; 敵の座標
dx = 8 : dy = 8  ; 敵の移動量
dx = 1 : dy = 1  ; 敵弾の移動量
etf = 0          ; 敵弾が画面上にある／ない

; *****************************************************************************************************************
;    メインループ
; *****************************************************************************************************************
*mainLoop

redraw 0              ; 仮想画面を指定
color  0, 0, 0        ; 色に黒を指定
boxf   0, 0, 240, 320 ; 仮想画面を黒で塗りつぶす

;
; 自機の移動処理
;
stick ky, 15        ; キーボードのチェック
if ky & 1 : px -= 4 : if px < 0   : px = 0
if ky & 4 : px += 4 : if px > 224 : px = 224
if ky & 2 : py -= 4 : if py < 0   : py = 0
if ky & 8 : py += 4 : if py > 304 : py = 304

pos   px, py        ; 自機の座標指定
color 0, 0, 255
mes   "▲"          ; 青で▲を表示

;
; 敵の移動処理
;
ex = ex + dx                    ; 敵の座標に移動量をプラス
if (ex<0) | (ex>224) : dx = -dx ; 画面端で反転

ey = ey + dy
if (ey<0) | (ey>304) : dy = -dy

pos   ex, ey        ; 敵の座標指定
color 255, 0, 0
mes   "■"          ; 赤で■を表示

;
; 敵弾の処理
;
if etf = 0 {               ; 敵弾が画面にない（etf = 0）時
    ds = 5                 ; 敵弾の速さ
    r = atan(py-ey, px-ex) ; 敵と自機との角度を求める
    etxv = cos(r) * ds     ; X移動量
    etyv = sin(r) * ds     ; Y移動量
    etf = 1                ; 弾が画面上に「ある」にする
    etx = ex               ; X座標
    ety = ey               ; Y座標
}

if etf = 1 {               ; 敵弾が画面にある（etf = 1）時
    etx = etxv + etx       ; X座標
    ety = etyv + ety       ; Y座標
    
    pos   etx, ety         ; 敵弾の座標指定
    color 255, 255, 0
    mes   "●"

    ;
    ; 敵弾が画面から消えたら「なし」にする
    ;
    if etx > 240 : etf = 0
    if etx < 0   : etf = 0
    if ety > 320 : etf = 0
    if ety < 0   : etf = 0
}

redraw 1  ; 画面の更新
await  16

goto *mainLoop
