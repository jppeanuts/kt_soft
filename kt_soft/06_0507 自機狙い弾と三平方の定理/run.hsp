;
; バッファ画面（ウィンドウ1）を用意し、画像を読み込む
;
buffer 1
picload "stg3.gif"

wxs = 480 : wys = 640 ; メイン画面の座標指定
;
; メイン画面（ウィンドウ0）を 480x640 で用意する
;
screen 0, wxs, wys, 0, 0, 0

px = 208 : py = 576 ; 自機の初期位置

;
; 自機弾の設定
;
tmx = 10      ; 数
dim tx, tmx   ; X座標
dim ty, tmx   ; Y座標
dim tf, tmx   ; 自機弾が画面上にある／ない

;
; 敵の設定
;
emx = 120     ; 数
dim ex, emx   ; X座標
dim ey, emx   ; Y座標
dim dx, emx   ; X移動量
dim dy, emx   ; Y移動量
dim ef, emx   ; 敵が画面上にいる／いない
dim em, emx   ; 種類
dim et, emx   ; 敵の生成時間

;
; 敵弾の設定
;
emt = 100     ; 数
dim etx,  emt ; X座標
dim ety,  emt ; Y座標
dim etxv, emt ; X移動量
dim etyv, emt ; Y移動量
dim etf,  emt ; 敵弾が画面上にある／ない

;
; 平方根表の準備
;
dim calc, 900               ; 平方根計算の為の配列変数
repeat 900                  ; 900回繰り返す。640x480の斜めの長さは約832なので
    temp = cnt
    calc(cnt) = temp * temp ; calc(cnt)にtempの2乗の値を入れておく
loop

; *****************************************************************************************************************
;    メインループ
; *****************************************************************************************************************
*mainLoop

redraw 0              ; 仮想画面を指定
color  0, 0, 0        ; 色に黒を指定
boxf   0, 0, 480, 640 ; 仮想画面を黒で塗りつぶす

; ----------------------------------------------------------------------------------------------
; *men 敵の初期化
; ----------------------------------------------------------------------------------------------
gosub *men

;
; 自機の移動処理
;
pk = 0                         ; 自機の傾きの為の変数
stick ky, 15                   ; キーボードのチェック
if ky & 1 : px -= 8 : pk = 64  : if px < 0   : px = 0
if ky & 4 : px += 8 : pk = 128 : if px > 416 : px = 416
if ky & 2 : py -= 8 :            if py < 0   : py = 0
if ky & 8 : py += 8 :            if py > 576 : py = 576
gmode 2                        ; 透明化処理の為の命令
pos   px, py                   ; 自機の座標指定
gcopy 1, pk, 0, 64, 64         ; バッファ画面（ウィンドウ1）より自機画像をコピー

; ----------------------------------------------------------------------------------------------
;  敵の移動処理
; ----------------------------------------------------------------------------------------------
repeat emx                        ; 「repeat〜loop」間をemx回繰り返す
    et(cnt)++                     ; 敵の生成時間 カウントアップ
    if ef(cnt)  < 1 : continue    ; ef(cnt)が1以下（画面上にいない）ならばrepeatに戻る
    if enm(cnt) = 2 : gosub *em02 ; enm(cnt)（敵の種類）が2ならば *em02 へ
loop

;
; 敵弾の発射処理
;
repeat emt                           ; 「repeat〜loop」間をemt回繰り返す
if etf(cnt) = 1 {                    ; etf(cnt)が1（敵弾が画面上にある）
    etx(cnt) = etx(cnt) + etxv(cnt)  ; 敵弾のX移動量
    ety(cnt) = ety(cnt) + etyv(cnt)  ; 敵弾のY移動量
    pos etx(cnt), ety(cnt)           ; 敵弾のX-Y座標を指定
    gcopy 1, 192, 64, 16, 16         ; バッファ画面（ウィンドウ1）より敵弾の画像をコピー

    if etx(cnt) > 480 : etf(cnt) = 0 ; 敵弾の座標が480以上になったら弾の存在を消す
    if etx(cnt) < 0   : etf(cnt) = 0
    if ety(cnt) > 640 : etf(cnt) = 0
    if ety(cnt) < 0   : etf(cnt) = 0
}
loop

redraw 1          ; メイン画面を更新
wait 1
; await 1         ; これを入れないとパソコンが固まる
gtime = gtime + 1 ; タイムテーブルの為の変数

goto *mainLoop

; *****************************************************************************************************************
;    サブルーチン
; *****************************************************************************************************************
; ----------------------------------------------------------------------------------------------
;   *men 敵の初期化
; ----------------------------------------------------------------------------------------------
*men
if gtime = 150 : bx = 0   : by = -64 : gosub *eb02
if gtime = 151 : bx = 415 : by = -64 : gosub *eb02
if gtime = 200 : bx = 0   : by = -64 : gosub *eb02
if gtime = 201 : bx = 415 : by = -64 : gosub *eb02
if gtime = 250 : bx = 0   : by = -64 : gosub *eb02
if gtime = 251 : bx = 415 : by = -64 : gosub *eb02

if gtime = 252 : gtime = 0
return

; ----------------------------------------------------------------------------------------------
;   *eb02 敵2の初期化
; ----------------------------------------------------------------------------------------------
*eb02
	
repeat emx                       ; 「repeat〜loop」間を emx回 繰り返す
    if ef(cnt) > 0 : continue    ; ef(cnt)が0以上（敵が画面上にいる）ならば repeatに戻る
    
    enm(cnt) = 2                 ; 敵の種類
    ef(cnt)  = 1                 ; 敵が画面上にいる
    ex(cnt)  = bx : ey(cnt) = by ; 生成位置（X-Y座標へ代入）
    dx(cnt)  = 3  : dy(cnt) = 1  ; X,Yの移動量
    et(cnt)  = 0                 ; 敵の生成時間をリセット
    break                        ; 「repeat〜loop」間のループから、強制的に抜け出す
loop
return

; ----------------------------------------------------------------------------------------------
;   *em02 敵2の移動処理
; ----------------------------------------------------------------------------------------------
*em02

ex(cnt) = ex(cnt) + dx(cnt)         ; 敵2のX移動量
if(ex(cnt) < 1) | (ex(cnt) > 415) { ; 画面の端まで行ったら反転させる
    dx(cnt) = -dx(cnt) 
}
ey(cnt) = ey(cnt) + dy(cnt)         ; 敵2のY移動量
if ey(cnt) > 640 {                  ; 画面から消えたら敵の存在を無しにする
    ef(cnt) = 0
}

;
; 敵2の表示
;
pos   ex(cnt), ey(cnt)
gmode 2
gcopy 1, 0, 128, 64, 64

;
; 敵弾の移動速度と方向
;
dxh = px - ex(cnt)
mx = dxh
if dxh < 0 : dxh = 0 - dxh      ; dxhの絶対値の計算

dyh = py - ey(cnt)
my = dyh
if dyh < 0 : dyh = 0 - dyh      ; dyhの絶対値の計算

dst = (dxh * dxh) + (dyh * dyh) ; 平方根の計算

repeat 900
    if dst < calc(cnt) : dst = cnt : break
loop

;
; 敵弾の発生処理
;
sx = px - ex(cnt) ; 自機と敵との差（X方向）
sy = py - ey(cnt) ; 自機と敵との差（Y方向）
txv = sx          ; txv, tyvにそれぞれ代入
tyv = sy 

if sx < 0 : sx = 0 - sx ; sxの絶対値
if sy < 0 : sy = 0 - sy ; syの絶対値
su = sx
if su < sy : su = sy    ; su に sx か sy のどちらか大きいほうを代入
                        ; su は自機と敵との大体の距離となる

if su > 250 {           ; su が 250以上の時
    if ef(cnt) = 1 {    ; ef(cnt)が 1（敵が画面にいる）の時
        if etf(cnt) = 0 : if enm(cnt) = 2 { ; etf(cnt)が0（画面に敵弾がない）かつ、
                                            ;   enm(cnt)が2（敵の名前が2）の時
            etf(cnt) = 1                    ; 画面に敵弾が存在する
            etx(cnt) = ex(cnt) + 24         ; 敵弾の初期座標
            ety(cnt) = ey(cnt) + 55         ;   少しずらしておかないと敵と重なる為
            ds = 7                          ; 敵弾の速度
            etxv(cnt) = mx * ds / dst       ; 敵弾のX方向の移動量
            etyv(cnt) = my * ds / dst       ; 敵弾のY方向の移動量
        }
    }
}
return
